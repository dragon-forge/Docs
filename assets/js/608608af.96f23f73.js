"use strict";(self.webpackChunkhammeranims=self.webpackChunkhammeranims||[]).push([[2418],{5960:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(5893),t=n(1151);const a={sidebar_position:1},l="Zero-code NBT serialization",s={id:"hammerlib/hladvanced/nbt_serialization",title:"Zero-code NBT serialization",description:"HammerLib offers easy to use, annotation-based NBT serialization mechanism.",source:"@site/docs/hammerlib/hladvanced/nbt_serialization.md",sourceDirName:"hammerlib/hladvanced",slug:"/hammerlib/hladvanced/nbt_serialization",permalink:"/docs/hammerlib/hladvanced/nbt_serialization",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Networking",permalink:"/docs/hammerlib/hladvanced/networking"},next:{title:"Extras",permalink:"/docs/category/extras"}},o={},c=[{value:"Mechanism",id:"mechanism",level:2},{value:"<code>INBTSerializer&lt;T&gt;</code>",id:"inbtserializert",level:3},{value:"Out-of-box serializers",id:"out-of-box-serializers",level:3},{value:"Null support?",id:"null-support",level:3},{value:"Example",id:"example",level:2}];function d(e){const i={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.h1,{id:"zero-code-nbt-serialization",children:"Zero-code NBT serialization"}),"\n",(0,r.jsxs)(i.p,{children:["HammerLib offers easy to use, annotation-based NBT serialization mechanism.\r\nThe easiest way to get started with it is implementing your object with ",(0,r.jsx)(i.code,{children:"IAutoNBTSerializable"}),"."]}),"\n",(0,r.jsxs)(i.admonition,{type:"info",children:[(0,r.jsx)(i.p,{children:"Internally, this interface is a layer on top of Forge's INBTSerializable interface:"}),(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"public interface IAutoNBTSerializable extends INBTSerializable<CompoundTag>\r\n{\r\n    @Override\r\n    default CompoundTag serializeNBT() { return NBTSerializationHelper.serialize(this); }\r\n\r\n    @Override\r\n    default void deserializeNBT(CompoundTag nbt) { NBTSerializationHelper.deserialize(this, nbt); }\r\n}\n"})})]}),"\n",(0,r.jsxs)(i.p,{children:["As you can see, this interface defaults both serialization methods into ",(0,r.jsx)(i.code,{children:"NBTSerializationHelper"}),". Technically you can use those same methods in your code, if ",(0,r.jsx)(i.code,{children:"IAutoNBTSerializable"})," is not an option."]}),"\n",(0,r.jsx)(i.h2,{id:"mechanism",children:"Mechanism"}),"\n",(0,r.jsxs)(i.p,{children:["The serializer goes over all ",(0,r.jsx)(i.code,{children:"@NBTSerializable"}),"-annotated fields in an instance, and attempts to serialize each field."]}),"\n",(0,r.jsx)(i.admonition,{type:"tip",children:(0,r.jsxs)(i.p,{children:["The serialized name is going to be the same as the field name itself.\r\nIf you want to override it, simply put the name into the annotation: ",(0,r.jsx)(i.code,{children:'@NBTSerializable("SerializedName")'})]})}),"\n",(0,r.jsx)(i.p,{children:"The field may be serialized on one of these conditions:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["The field is ",(0,r.jsx)(i.strong,{children:"final"})," and its type ",(0,r.jsx)(i.code,{children:"T"})," is instanceof ",(0,r.jsx)(i.code,{children:"INBTSerializable"}),", and it is ",(0,r.jsx)(i.strong,{children:"not null"}),". In this case, the ",(0,r.jsx)(i.code,{children:"INBTSerializable.serializeNBT"})," and ",(0,r.jsx)(i.code,{children:"INBTSerializable.deserializeNBT"})," are called with a tag."]}),"\n",(0,r.jsxs)(i.li,{children:["The field is ",(0,r.jsx)(i.strong,{children:"non-final"})," and its type ",(0,r.jsx)(i.code,{children:"T"})," has a linked ",(0,r.jsx)(i.code,{children:"INBTSerializer<T>"}),"."]}),"\n",(0,r.jsxs)(i.li,{children:["The field is ",(0,r.jsx)(i.strong,{children:"non-final"})," and its type is any dimensional (",(0,r.jsx)(i.code,{children:"T[]"}),", ",(0,r.jsx)(i.code,{children:"T[][]"}),", ",(0,r.jsx)(i.code,{children:"T[][]"})," etc) array of a type has a linked ",(0,r.jsx)(i.code,{children:"INBTSerializer<T>"}),"."]}),"\n",(0,r.jsxs)(i.li,{children:["The field is ",(0,r.jsx)(i.strong,{children:"non-final"})," and its type is any enum value, or null. (all enums are supported out of box)"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"A NBT tag compound will be created, storing each named field inside it, storing its respective tag type."}),"\n",(0,r.jsx)(i.h3,{id:"inbtserializert",children:(0,r.jsx)(i.code,{children:"INBTSerializer<T>"})}),"\n",(0,r.jsx)(i.p,{children:"To put it simply, this interface allows reading of complex objects to and from NBT, creating a new instance when reading."}),"\n",(0,r.jsxs)(i.p,{children:["If your object of interest has a codec, you might want to register a serializer using ",(0,r.jsx)(i.code,{children:"BaseCodecSerializer<T>"})]}),"\n",(0,r.jsx)(i.p,{children:"Here is an example on BlockState from HammerLib:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"package org.zeith.hammerlib.api.io.serializers;\r\n\r\nimport com.google.common.base.Suppliers;\r\nimport com.mojang.serialization.Codec;\r\nimport net.minecraft.world.level.block.Blocks;\r\nimport net.minecraft.world.level.block.state.BlockState;\r\nimport org.zeith.hammerlib.api.io.NBTSerializer;\r\n\r\nimport java.util.function.Supplier;\r\n\r\n@NBTSerializer(BlockState.class)\r\npublic class BlockStateSerializer\r\n        extends BaseCodecSerializer<BlockState>\r\n{\r\n    public BlockStateSerializer()\r\n    {\r\n        super(BlockState.CODEC, Suppliers.memoize(Blocks.AIR::defaultBlockState)); // supplier is the default value for when the state was not found\r\n    }\r\n}\n"})}),"\n",(0,r.jsx)(i.p,{children:"For something that doesn't use codec, you may as well write the basic implementation. Here is another example from HammerLib:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"package org.zeith.hammerlib.api.io.serializers;\r\n\r\nimport net.minecraft.nbt.CompoundTag;\r\nimport net.minecraft.nbt.Tag;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport org.jetbrains.annotations.NotNull;\r\nimport org.zeith.hammerlib.api.io.NBTSerializer;\r\n\r\n@NBTSerializer(ItemStack.class)\r\npublic class ItemStackSerializer\r\n        implements INBTSerializer<ItemStack>\r\n{\r\n    @Override\r\n    public void serialize(CompoundTag nbt, String key, @NotNull ItemStack value)\r\n    {\r\n        if(!value.isEmpty())\r\n            nbt.put(key, value.serializeNBT());\r\n    }\r\n\r\n    @Override\r\n    public ItemStack deserialize(CompoundTag nbt, String key)\r\n    {\r\n        return nbt.contains(key, Tag.TAG_COMPOUND) ? ItemStack.of(nbt.getCompound(key)) : ItemStack.EMPTY;\r\n    }\r\n}\n"})}),"\n",(0,r.jsx)(i.h3,{id:"out-of-box-serializers",children:"Out-of-box serializers"}),"\n",(0,r.jsx)(i.p,{children:"HammerLib provides a wide support of Minecraft's objects to be serialized.\r\nAs of HammerLib 19.3.76 (1.19.2), the list of supported objects are:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["All Java primitive types (both primitive and wrapped) (both ",(0,r.jsx)(i.code,{children:"int"})," and ",(0,r.jsx)(i.code,{children:"Integer"}),")"]}),"\n",(0,r.jsx)(i.li,{children:"byte[]"}),"\n",(0,r.jsx)(i.li,{children:"int[]"}),"\n",(0,r.jsx)(i.li,{children:"long[]"}),"\n",(0,r.jsx)(i.li,{children:"BlockPos"}),"\n",(0,r.jsx)(i.li,{children:"BLockState"}),"\n",(0,r.jsx)(i.li,{children:"Component"}),"\n",(0,r.jsx)(i.li,{children:"FluidStack"}),"\n",(0,r.jsx)(i.li,{children:"GlobalPos"}),"\n",(0,r.jsx)(i.li,{children:"ItemStack"}),"\n",(0,r.jsx)(i.li,{children:"BigInteger"}),"\n",(0,r.jsx)(i.li,{children:"BigDecimal"}),"\n",(0,r.jsx)(i.li,{children:"ParticleOptions"}),"\n",(0,r.jsx)(i.li,{children:"ResourceLocation"}),"\n",(0,r.jsx)(i.li,{children:"String"}),"\n",(0,r.jsx)(i.li,{children:"UUID"}),"\n",(0,r.jsx)(i.li,{children:"Vec3"}),"\n",(0,r.jsx)(i.li,{children:"Vector3d"}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"null-support",children:"Null support?"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"All OOB serializers are compatible with null values and should work effortlessly."}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(i.p,{children:"Let's contextualize this knowledge and provide a meaningful example!"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:'@ToString\r\npublic class TestSerializable\r\n        implements IAutoNBTSerializable\r\n{\r\n    @NBTSerializable("Progress")\r\n    public final WorkInfo workInfo = new WorkInfo();\r\n    \r\n    @NBTSerializable("Energy")\r\n    public int energy;\r\n    \r\n    @NBTSerializable\r\n    public ResourceLocation texture = new ResourceLocation("yourmod", "textures/entity/test.png");\r\n    \r\n    @ToString\r\n    public static class WorkInfo\r\n            implements IAutoNBTSerializable\r\n    {\r\n        @NBTSerializable("Cur")\r\n        public int progress;\r\n        \r\n        @NBTSerializable("Max")\r\n        public int maxProgress;\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(i.admonition,{type:"info",children:(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"@ToString"})," is from Lombok and is used to generate toString result. You can safely ignore these annotations."]})}),"\n",(0,r.jsxs)(i.p,{children:["Let's configure and serialize our ",(0,r.jsx)(i.code,{children:"TestSerializable"})," object:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:'TestSerializable t = new TestSerializable();\r\nt.energy = 356;\r\nt.workInfo.progress = 10;\r\nt.workInfo.maxProgress = 200;\r\nt.texture = new ResourceLocation("yourmod", "textures/entity/test_active.png");\r\n\r\nvar tag = t.serializeNBT();\r\nSystem.out.println(tag);\n'})}),"\n",(0,r.jsx)(i.p,{children:"The result we should see would look like this:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:'{Energy:356,Progress:{Cur:10,Max:200},texture:"yourmod:textures/entity/test_active.png"}\n'})}),"\n",(0,r.jsx)(i.p,{children:"Let's reconstruct our object back from the tag and see if it's correct!"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"var test = new TestSerializable();\r\ntest.deserializeNBT(tag);\r\nSystem.out.println(test);\n"})}),"\n",(0,r.jsx)(i.p,{children:"And as expected, the result looks pretty much correct!"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{children:"TestSerializable(workInfo=TestSerializable.WorkInfo(progress=10, maxProgress=200), energy=356, texture=yourmod:textures/entity/test_active.png)\n"})})]})}function h(e={}){const{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,i,n)=>{n.d(i,{Z:()=>s,a:()=>l});var r=n(7294);const t={},a=r.createContext(t);function l(e){const i=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(a.Provider,{value:i},e.children)}}}]);