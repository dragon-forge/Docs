"use strict";(self.webpackChunkhammeranims=self.webpackChunkhammeranims||[]).push([[9875],{2505:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var r=n(5893),i=n(1151);const o={sidebar_position:1},s="\ud83d\udc26 Entity Rendering",a={id:"api/hammeranims/geometry/entity_rendering",title:"\ud83d\udc26 Entity Rendering",description:"HammerAnimation provides a system to dynamically render a geometry with animations, but creating a whole entity renderer would be tedious.",source:"@site/docs/api/hammeranims/geometry/entity_rendering.md",sourceDirName:"api/hammeranims/geometry",slug:"/api/hammeranims/geometry/entity_rendering",permalink:"/docs/api/hammeranims/geometry/entity_rendering",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"apiSidebar",previous:{title:"\ud83d\udcdd Registration",permalink:"/docs/api/hammeranims/geometry/registration"},next:{title:"\ud83c\udf4b Generic Rendering",permalink:"/docs/api/hammeranims/geometry/generic_rendering"}},c={},d=[];function m(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"-entity-rendering",children:"\ud83d\udc26 Entity Rendering"}),"\n",(0,r.jsx)(t.p,{children:"HammerAnimation provides a system to dynamically render a geometry with animations, but creating a whole entity renderer would be tedious."}),"\n",(0,r.jsxs)(t.p,{children:["Instead, you can use HammerAnimations' provided class, ",(0,r.jsx)(t.code,{children:"BedrockEntityRenderer<T>"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"The class offers a seamless integration of your model into the game."}),"\n",(0,r.jsxs)(t.p,{children:["To change the render type of the model, override ",(0,r.jsx)(t.code,{children:"BedrockEntityRenderer.getRenderType"})," method."]}),"\n",(0,r.jsx)(t.p,{children:"An example of registering a renderer and in-place registration:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'package org.zeith.hammeranims.core.client.render.entity;\n\nimport net.minecraft.client.renderer.RenderType;\nimport net.minecraft.client.renderer.entity.*;\nimport net.minecraft.resources.ResourceLocation;\nimport net.minecraftforge.api.distmarker.Dist;\nimport net.minecraftforge.client.event.EntityRenderersEvent;\nimport net.minecraftforge.eventbus.api.SubscribeEvent;\nimport net.minecraftforge.fml.common.Mod;\nimport org.zeith.hammeranims.HammerAnimations;\nimport org.zeith.hammeranims.core.contents.entity.EntityBilly;\nimport org.zeith.hammeranims.core.init.ContainersHA;\n\n@Mod.EventBusSubscriber(value = Dist.CLIENT, bus = Mod.EventBusSubscriber.Bus.MOD)\npublic class RenderEntityBilly\n\t\textends BedrockEntityRenderer<EntityBilly>\n{\n// Here is where the texture is specified\n\tprotected final ResourceLocation texture = new ResourceLocation("hammeranims", "textures/entity/billy.png");\n\t\n\tpublic RenderEntityBilly(EntityRendererProvider.Context pContext)\n\t{\n\t\t// Here is where we specify the geometry file\n\t\tsuper(pContext, ContainersHA.BILLY_GEOM, 0.5F);\n\t}\n\t\n// This method is responsible for properly choosing the transparency of a given model.\n// Use RenderType.entityCutoutNoCull for entities that have either opaque or invisible pixels (no in-between!)\n// Use RenderType.entitySolid for entities that do not have any transparency at all (ex. creepers)\n// Use RenderType.entityTranslucent for entities that have translucency (partial translucency)\n// Use RenderType.entityTranslucentEmissive for entities that have translucency (partial translucency) and should be glowing in darkness\n\t@Override\n\tprotected RenderType getRenderType(ResourceLocation texture)\n\t{\n\t\treturn RenderType.entityCutout(texture);\n\t}\n\t\n// This method binds our renderer to the entity type\n\t@SubscribeEvent\n\tpublic static void registerRenderer(EntityRenderersEvent.RegisterRenderers e)\n\t{\n\t\te.registerEntityRenderer(ContainersHA.BILLY_ENTITY, RenderEntityBilly::new);\n\t}\n\t\n// Here we provide the texture for a given entity.\n\t@Override\n\tpublic ResourceLocation getTextureLocation(EntityBilly entity)\n\t{\n\t\treturn texture;\n\t}\n}\n'})})]})}function l(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>s});var r=n(7294);const i={},o=r.createContext(i);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);