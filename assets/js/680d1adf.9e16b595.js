"use strict";(self.webpackChunkhammeranims=self.webpackChunkhammeranims||[]).push([[5668],{463:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});var t=n(5893),r=n(1151);const o={sidebar_position:0},l="Content Registration",s={id:"hammerlib/hlbasics/content_registration",title:"Content Registration",description:"Here we go over how to registar stuff with HammerLib.",source:"@site/docs/hammerlib/hlbasics/content_registration.md",sourceDirName:"hammerlib/hlbasics",slug:"/hammerlib/hlbasics/content_registration",permalink:"/docs/hammerlib/hlbasics/content_registration",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"HammerLib Basics",permalink:"/docs/category/hammerlib-basics"},next:{title:"Legacy .lang files",permalink:"/docs/hammerlib/hlbasics/legacy_langs"}},c={},a=[{value:"Peparations",id:"peparations",level:2},{value:"Adding contents",id:"adding-contents",level:3},{value:"@OnlyIf",id:"onlyif",level:3},{value:"Custom registrars",id:"custom-registrars",level:3},{value:"Fluid registration",id:"fluid-registration",level:3},{value:"Special treatment for Blocks",id:"special-treatment-for-blocks",level:2},{value:"Adding default <code>BlockItem</code> to creative tab",id:"adding-default-blockitem-to-creative-tab",level:3},{value:"Disabling <code>BlockItem</code>",id:"disabling-blockitem",level:3},{value:"Tweaking default <code>BlockItem</code>",id:"tweaking-default-blockitem",level:3},{value:"Custom <code>BlockItem</code>",id:"custom-blockitem",level:3},{value:"BlockEntities",id:"blockentities",level:2},{value:"Client-side rendering",id:"client-side-rendering",level:2},{value:"BlockEntityType&lt;?&gt;",id:"blockentitytype",level:3},{value:"ParticleType&lt;?&gt;",id:"particletype",level:3}];function d(e){const i={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"content-registration",children:"Content Registration"}),"\n",(0,t.jsx)(i.p,{children:"Here we go over how to registar stuff with HammerLib."}),"\n",(0,t.jsx)(i.p,{children:"In order to register your objects into the game, HammerLib offers annotation-based solution."}),"\n",(0,t.jsx)(i.h2,{id:"peparations",children:"Peparations"}),"\n",(0,t.jsxs)(i.p,{children:["Start by creating an ",(0,t.jsx)(i.code,{children:"interface"})," class, which will store your objects-of-choice.\nThis objects may be anything that needs to be registered into IForgeRegistries (or vanilla regitries)"]}),"\n",(0,t.jsxs)(i.admonition,{type:"info",children:[(0,t.jsx)(i.p,{children:"These interfaces do NOT need to be subscribed into HammerLib."}),(0,t.jsx)(i.p,{children:"They automagically get subscribed when loading the game, and do not need any special registration."})]}),"\n",(0,t.jsx)(i.p,{children:"You will need to import HammerLib annotations:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:"import org.zeith.hammerlib.annotations.*;\n"})}),"\n",(0,t.jsxs)(i.p,{children:["Annotate your interface with ",(0,t.jsx)(i.code,{children:"@SimplyRegister"}),"."]}),"\n",(0,t.jsxs)(i.admonition,{type:"tip",children:[(0,t.jsxs)(i.p,{children:["There is an optional ",(0,t.jsx)(i.code,{children:"prefix"})," parameter to insert the given prefix into all registry names of contents declared in the interface."]}),(0,t.jsxs)(i.p,{children:["An example of prefixed annotation would be ",(0,t.jsx)(i.code,{children:'@SimplyRegister(prefix = "furniture/")'}),"."]})]}),"\n",(0,t.jsx)(i.p,{children:"The result should look something like this:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:"package com.yourname.yourmod.init;\n\nimport org.zeith.hammerlib.annotations.*;\n\n@SimplyRegister\npublic interface ModBlocks\n{\n}\n"})}),"\n",(0,t.jsx)(i.h3,{id:"adding-contents",children:"Adding contents"}),"\n",(0,t.jsxs)(i.p,{children:["Adding new things is as simple as adding a variable of given type, and annotating it with ",(0,t.jsx)(i.code,{children:'@RegistryName("name")'}),'.\nThe "name" must be unique value.']}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'package com.yourname.yourmod.init;\n\nimport org.zeith.hammerlib.annotations.*;\n\n@SimplyRegister\npublic interface ModBlocks\n{\n    @RegistryName("your_block")\n    YourBlock YOUR_BLOCK = new YourBlock();\n}\n'})}),"\n",(0,t.jsx)(i.h3,{id:"onlyif",children:"@OnlyIf"}),"\n",(0,t.jsx)(i.p,{children:'Some registries are considered "intrusive", which means that as soon as you create an instance of registry entry, you must register it, or the game is going to crash.'}),"\n",(0,t.jsx)(i.p,{children:"By default, we treat all vanilla registries as intrusive."}),"\n",(0,t.jsxs)(i.p,{children:["All non-intrusive registries (such as your custom registries) may use the ",(0,t.jsx)(i.code,{children:"@OnlyIf"})," annotation on per-field basis.\nEach entry of non-intrusive registry will be checked against this annotation to determine if it should be registered or not."]}),"\n",(0,t.jsx)(i.admonition,{type:"danger",children:(0,t.jsxs)(i.p,{children:["Be careful when referencing such objects!\nThey may not have a registry key, since they were not registered, and thus may cause unexpected issues to arise.\nI advise you to avoid using ",(0,t.jsx)(i.code,{children:"@OnlyIf"}),"s when possible."]})}),"\n",(0,t.jsxs)(i.p,{children:["An example of conditional annotation would be ",(0,t.jsx)(i.code,{children:'@OnlyIf(owner = ModHelper.class, member = "inDev", invert = false)'}),".\nThis will call ",(0,t.jsx)(i.code,{children:"public static boolean inDev()"})," method inside ",(0,t.jsx)(i.code,{children:"ModHelper"}),".\n",(0,t.jsx)(i.code,{children:"invert"})," is used to apply !(owner.member()). In other words, if we set ",(0,t.jsx)(i.code,{children:"invert = true"}),", then ",(0,t.jsx)(i.code,{children:"inDev"})," must return ",(0,t.jsx)(i.code,{children:"false"})," for the object to get registered."]}),"\n",(0,t.jsxs)(i.p,{children:["Here is an example from ",(0,t.jsx)(i.a,{href:"https://modrinth.com/mod/improvable-skills",children:"ImprovableSkills"}),":"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'package com.yourname.yourmod.init;\n\nimport org.zeith.hammerlib.annotations.*;\n\n@SimplyRegister\npublic interface ModBlocks\n{\n    @RegistryName("your_block")\n    YourBlock YOUR_BLOCK = new YourBlock();\n}\n'})}),"\n",(0,t.jsx)(i.h3,{id:"custom-registrars",children:"Custom registrars"}),"\n",(0,t.jsxs)(i.p,{children:["For more complex solutions (like fluids) which require more than one object to be registered (into multiple registries), you should create a class that implements ",(0,t.jsx)(i.code,{children:"ICustomRegistrar"})," from package ",(0,t.jsx)(i.code,{children:"org.zeith.hammerlib.api.fml"}),"."]}),"\n",(0,t.jsx)(i.p,{children:"There is only one method that you must implement:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:"/**\n * Perform the registration via RegisterEvent.\n * This gets called for all registries there are, please filter things out.\n * Use the ResourceLocation id\n */\nvoid performRegister(RegisterEvent event, ResourceLocation id)\n"})}),"\n",(0,t.jsx)(i.p,{children:"You should put the custom registrars as any other registry object inside your content interface."}),"\n",(0,t.jsxs)(i.p,{children:["HammerLib has an example of such implementation, being ",(0,t.jsx)(i.code,{children:"org.zeith.hammerlib.api.fluid.FluidFactory"}),"."]}),"\n",(0,t.jsx)(i.h3,{id:"fluid-registration",children:"Fluid registration"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"FluidFactory"})," is what HammerLib offers to regiter fluids, alongside their bucket item, fluid block, fluid type, still & flowing fluids. (Basically a lot of things packed in one!)"]}),"\n",(0,t.jsx)(i.p,{children:"Here is an example of adding custom water fluid into the game:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'package com.yourname.yourmod.init;\n\nimport net.minecraft.core.BlockPos;\nimport net.minecraft.sounds.SoundEvents;\nimport net.minecraft.world.level.Level;\nimport net.minecraft.world.level.material.FluidState;\nimport net.minecraftforge.common.SoundActions;\nimport net.minecraftforge.fluids.*;\nimport org.zeith.hammerlib.annotations.*;\nimport org.zeith.hammerlib.api.fluid.FluidFactory;\nimport org.zeith.hammerlib.proxy.HLConstants;\n\n@SimplyRegister\npublic interface ModFluids\n{\n\t@RegistryName("water")\n\tFluidFactory WATER = FluidFactory.builder(FluidType.Properties.create()\n\t\t\t\t\t.canSwim(true)\n\t\t\t\t\t.canDrown(true)\n\t\t\t\t\t.canConvertToSource(true)\n\t\t\t\t\t.sound(SoundActions.BUCKET_FILL, SoundEvents.BUCKET_FILL)\n\t\t\t\t\t.sound(SoundActions.BUCKET_EMPTY, SoundEvents.BUCKET_EMPTY)\n\t\t\t\t\t.sound(SoundActions.FLUID_VAPORIZE, SoundEvents.FIRE_EXTINGUISH)\n\t\t\t)\n\t\t\t.withBlock()\n\t\t\t.withBucket()\n\t\t\t.addToTab(HLConstants.HL_TAB)\n\t\t\t.propertyModifier(p -> p.levelDecreasePerBlock(2))\n\t\t\t.build();\n}\n'})}),"\n",(0,t.jsx)(i.h2,{id:"special-treatment-for-blocks",children:"Special treatment for Blocks"}),"\n",(0,t.jsxs)(i.p,{children:["Blocks are special in a way that they have their Items.\nHammerLib automagically registers a default ",(0,t.jsx)(i.code,{children:"BlockItem"})," for every ",(0,t.jsx)(i.code,{children:"Block"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["There are three interfaces for a custom ",(0,t.jsx)(i.code,{children:"Block"})," class that may alter what/how ",(0,t.jsx)(i.code,{children:"BlockItem"})," will be registered."]}),"\n",(0,t.jsxs)(i.h3,{id:"adding-default-blockitem-to-creative-tab",children:["Adding default ",(0,t.jsx)(i.code,{children:"BlockItem"})," to creative tab"]}),"\n",(0,t.jsxs)(i.p,{children:["To add default instance of ",(0,t.jsx)(i.code,{children:"BlockItem"})," to a creative tab, you should implement ",(0,t.jsx)(i.code,{children:"ICreativeTabBlock"})," from package ",(0,t.jsx)(i.code,{children:"org.zeith.hammerlib.api.blocks"}),".\nYou will have to implement ",(0,t.jsx)(i.code,{children:"getCreativeTab"})," method, which should return the tab to which the item will be assigned."]}),"\n",(0,t.jsxs)(i.h3,{id:"disabling-blockitem",children:["Disabling ",(0,t.jsx)(i.code,{children:"BlockItem"})]}),"\n",(0,t.jsxs)(i.p,{children:["To prevent ",(0,t.jsx)(i.code,{children:"BlockItem"})," from being registered altogether, you should implement ",(0,t.jsx)(i.code,{children:"INoItemBlock"})," from package ",(0,t.jsx)(i.code,{children:"org.zeith.hammerlib.api.blocks"}),".\nThis behavior would be similar to how Minecraft does not register items for fluids, fire and similar blocks without an item."]}),"\n",(0,t.jsxs)(i.h3,{id:"tweaking-default-blockitem",children:["Tweaking default ",(0,t.jsx)(i.code,{children:"BlockItem"})]}),"\n",(0,t.jsxs)(i.p,{children:["If you wish to change item properties of a default ",(0,t.jsx)(i.code,{children:"BlockItem"})," implementation, like stack size, you will have implement ",(0,t.jsx)(i.code,{children:"IItemPropertySupplier"})," from package ",(0,t.jsx)(i.code,{children:"org.zeith.hammerlib.api.blocks"}),".\nYou will have to implement ",(0,t.jsx)(i.code,{children:"createItemProperties"})," method, which should return the first parameter (",(0,t.jsx)(i.code,{children:"Item.Properties"}),") back, but modified."]}),"\n",(0,t.jsxs)(i.h3,{id:"custom-blockitem",children:["Custom ",(0,t.jsx)(i.code,{children:"BlockItem"})]}),"\n",(0,t.jsxs)(i.p,{children:["In order to change what ",(0,t.jsx)(i.code,{children:"BlockItem"})," is going to be created for a given block, you should implement ",(0,t.jsx)(i.code,{children:"ICustomBlockItem"})," from package ",(0,t.jsx)(i.code,{children:"org.zeith.hammerlib.api.blocks"}),".\nYou will have to implement ",(0,t.jsx)(i.code,{children:"createBlockItem"})," method, which should return a new ",(0,t.jsx)(i.code,{children:"BlockItem"})," instance bound to the current ",(0,t.jsx)(i.code,{children:"Block"})," instance."]}),"\n",(0,t.jsx)(i.h2,{id:"blockentities",children:"BlockEntities"}),"\n",(0,t.jsx)(i.p,{children:"HammerLib offers built-in tiles for two use cases:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Static block entity - ",(0,t.jsx)(i.code,{children:"TileSyncable"})]}),"\n",(0,t.jsxs)(i.li,{children:["Ticking block entity - ",(0,t.jsx)(i.code,{children:"TileSyncableTickable"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[":::info This will require a ticker method inside your ",(0,t.jsx)(i.code,{children:"Block"})," class."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:"  @Nullable\n  @Override\n  public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level pLevel, BlockState pState, BlockEntityType<T> pBlockEntityType)\n  {\n  \treturn BlockAPI.ticker(pLevel);\n  }\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["To create BlockEntityType<?>, use ",(0,t.jsx)(i.code,{children:"BlockAPI"})," from package ",(0,t.jsx)(i.code,{children:"org.zeith.hammerlib.api.forge"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["You will be using ",(0,t.jsx)(i.code,{children:"BlockAPI.createBlockEntityType(DynamicBlockEntitySupplier<T> generator, Block... blocks)"})," method."]}),"\n",(0,t.jsxs)(i.p,{children:["You must add a vanilla constructor into your ",(0,t.jsx)(i.code,{children:"BlockEntity"}),": ",(0,t.jsx)(i.code,{children:"public BlockEntity(BlockEntityType<?> type, BlockPos pos, BlockState state)"})]}),"\n",(0,t.jsx)(i.h2,{id:"client-side-rendering",children:"Client-side rendering"}),"\n",(0,t.jsx)(i.p,{children:"Some vanilla client-side rendering registration may be simplified using annotation-based binding, offered by HammerLib."}),"\n",(0,t.jsx)(i.admonition,{type:"info",children:(0,t.jsxs)(i.p,{children:["You must be using annotation-based registration system (",(0,t.jsx)(i.code,{children:"@SimplyRegister"}),") for these features to work."]})}),"\n",(0,t.jsx)(i.h3,{id:"blockentitytype",children:"BlockEntityType<?>"}),"\n",(0,t.jsxs)(i.p,{children:["To add renderer to your BlockEntity, add ",(0,t.jsx)(i.code,{children:"@TileRenderer(RenderModTile.class)"})," annotation."]}),"\n",(0,t.jsx)(i.p,{children:"Here is an example of"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'package com.yourname.yourmod.init;\n\nimport com.yourname.yourmod.client.render.tile.*;\nimport com.yourname.yourmod.init.ModBlocks;\n\nimport org.zeith.hammerlib.annotations.*;\nimport org.zeith.hammerlib.annotations.client.TileRenderer;\n\n@SimplyRegister\npublic interface ModTiles\n{\n    @RegistryName("example")\n\t@TileRenderer(RenderExampleTile.class)\n\tBlockEntityType<TileExample> EXAMPLE_TILE = BlockAPI.createBlockEntityType(TileExample::new, ModBlocks.EXAMPLE_BLOCK);\n}\n'})}),"\n",(0,t.jsxs)(i.p,{children:["Your ",(0,t.jsx)(i.code,{children:"RenderExampleTile"})," from the example above should implement ",(0,t.jsx)(i.code,{children:"BlockEntityRenderer<TileExample>"})," and have one constructor from the list below:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["no-args constructor (",(0,t.jsx)(i.code,{children:"public RenderExampleTile() {}"}),")"]}),"\n",(0,t.jsxs)(i.li,{children:["1-parameter constructor (",(0,t.jsx)(i.code,{children:"public RenderExampleTile(BlockEntityRendererProvider.Context ctx) {}"}),")"]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"particletype",children:"ParticleType<?>"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'package com.yourname.yourmod.init;\n\nimport com.mojang.serialization.Codec;\nimport net.minecraft.core.particles.*;\nimport org.zeith.hammerlib.annotations.*;\nimport org.zeith.hammerlib.annotations.client.Particles;\nimport com.yourname.yourmod.client.particle.ClientTestParticle;\nimport com.yourname.yourmod.content.particles.ParticleWisp;\n\n@SimplyRegister\npublic interface ParticlesWL\n{\n\t@RegistryName("wisp")\n\t@Particles(ClientTestParticle.Provider.class)\n\tParticleType<ParticleTest> WISP = create(false, ParticleTest.DESERIALIZER, ParticleTest.CODEC);\n\t\n\tstatic SimpleParticleType simple(boolean pOverrideLimiter)\n\t{\n\t\treturn new SimpleParticleType(pOverrideLimiter);\n\t}\n\t\n\tstatic <T extends ParticleOptions> ParticleType<T> create(boolean pOverrideLimiter, ParticleOptions.Deserializer<T> pDeserializer, final Codec<T> pCodec)\n\t{\n\t\treturn new ParticleType<>(pOverrideLimiter, pDeserializer)\n\t\t{\n\t\t\t@Override\n\t\t\tpublic Codec<T> codec()\n\t\t\t{\n\t\t\t\treturn pCodec;\n\t\t\t}\n\t\t};\n\t}\n}\n'})}),"\n",(0,t.jsxs)(i.p,{children:["The provider from ",(0,t.jsx)(i.code,{children:"ClientTestParticle.Provider"})," must implement one interface from the list:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"ParticleProvider.Sprite"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"and have default 0-arg constructor."}),"\n",(0,t.jsxs)(i.li,{children:["Used for creating instances of ",(0,t.jsx)(i.code,{children:"TextureSheetParticle"})," which pick their sprite natively."]}),"\n",(0,t.jsx)(i.li,{children:"Requires particle json."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"ParticleEngine.SpriteParticleRegistration"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"and have default 0-arg constructor."}),"\n",(0,t.jsxs)(i.li,{children:["Used for creating custom ",(0,t.jsx)(i.code,{children:"ParticleProvider<?>"})," with a sprite set."]}),"\n",(0,t.jsx)(i.li,{children:"Requires particle json."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"ParticleProvider<?>"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["and have default 1-arg constructor ",(0,t.jsx)(i.code,{children:"public Provider(SpriteSet set)"}),"."]}),"\n",(0,t.jsx)(i.li,{children:"Used for creating standard particles with sprite set which is used for picking sprite by a particle."}),"\n",(0,t.jsx)(i.li,{children:"Requires particle json."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["sprite-less ",(0,t.jsx)(i.code,{children:"ParticleProvider<?>"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"and have default 0-arg constructor."}),"\n",(0,t.jsx)(i.li,{children:"Used for creating special particles with no sprites to pick."}),"\n",(0,t.jsx)(i.li,{children:"This means that there must be NO particle json."}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,i,n)=>{n.d(i,{Z:()=>s,a:()=>l});var t=n(7294);const r={},o=t.createContext(r);function l(e){const i=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(o.Provider,{value:i},e.children)}}}]);