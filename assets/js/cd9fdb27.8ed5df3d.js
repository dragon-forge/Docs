"use strict";(self.webpackChunkhammeranims=self.webpackChunkhammeranims||[]).push([[9722],{7034:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var t=i(5893),a=i(1151);const s={sidebar_position:2},o="\ud83d\udc83 Animation Systems",r={id:"api/hammeranims/animations/animation_system",title:"\ud83d\udc83 Animation Systems",description:"What are they and how they play?",source:"@site/docs/api/hammeranims/animations/animation_system.md",sourceDirName:"api/hammeranims/animations",slug:"/api/hammeranims/animations/animation_system",permalink:"/docs/api/hammeranims/animations/animation_system",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"apiSidebar",previous:{title:"\ud83d\udcdd Registration",permalink:"/docs/api/hammeranims/animations/registration"},next:{title:"\ud83d\udd27 ConfiguredAnimation",permalink:"/docs/api/hammeranims/animations/configured_animation"}},l={},d=[{value:"Essentials",id:"essentials",level:2},{value:"\ud83e\udea8 IAnimatedObject",id:"-ianimatedobject",level:3},{value:"\ud83e\udd6c Animation Layers",id:"-animation-layers",level:3},{value:"\u2615 Creating animation system",id:"-creating-animation-system",level:2},{value:"\u2699\ufe0f Configuring",id:"\ufe0f-configuring",level:2},{value:"\ud83e\uddf1 AnimationSystem.Builder",id:"-animationsystembuilder",level:3},{value:"\ud83e\uddf1 AnimationLayer.Builder",id:"-animationlayerbuilder",level:3},{value:"\u2615 Writing <code>setupSystem</code>",id:"-writing-setupsystem",level:3},{value:"\u2705 Complete example",id:"-complete-example",level:2},{value:"\u23ef\ufe0f Playing animations",id:"\ufe0f-playing-animations",level:2}];function m(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"-animation-systems",children:"\ud83d\udc83 Animation Systems"}),"\n",(0,t.jsx)(n.p,{children:"What are they and how they play?"}),"\n",(0,t.jsx)(n.h2,{id:"essentials",children:"Essentials"}),"\n",(0,t.jsx)(n.p,{children:"Running our newly registered animations requires an object that may combine multiple animations, transition between them and keep them in sync between server and clients."}),"\n",(0,t.jsxs)(n.p,{children:["This is where ",(0,t.jsx)(n.code,{children:"AnimationSystem"})," comes into play."]}),"\n",(0,t.jsx)(n.h3,{id:"-ianimatedobject",children:"\ud83e\udea8 IAnimatedObject"}),"\n",(0,t.jsxs)(n.p,{children:["Your animated object must implement ",(0,t.jsx)(n.code,{children:"IAnimatedObject"}),".\nHammerAnimations provides you with two presets to use:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"IAnimatedEntity"})," for entities with animation system"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"IAnimatedTile"})," for block entities (or tile entities) with animation system\nImplementing your own object type does mean that you're going to need to register ",(0,t.jsx)(n.code,{children:"IObjectSource"})," from HammerLib."]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["If you're using HammerMultipart, there is ",(0,t.jsx)(n.code,{children:"PartSourceType"})," provide ",(0,t.jsx)(n.code,{children:"IObjectSource<PartEntity>"})," using ",(0,t.jsx)(n.code,{children:"PartSourceType.of(PartEntity part)"})," method."]})}),"\n",(0,t.jsx)(n.p,{children:"Any animation system has one or more animation layers inside it, used to play and update animations."}),"\n",(0,t.jsx)(n.h3,{id:"-animation-layers",children:"\ud83e\udd6c Animation Layers"}),"\n",(0,t.jsx)(n.p,{children:"Each animation layer stores active animation, while also having some configuration on its part."}),"\n",(0,t.jsx)(n.h2,{id:"-creating-animation-system",children:"\u2615 Creating animation system"}),"\n",(0,t.jsxs)(n.p,{children:["To create and store a new instance of ",(0,t.jsx)(n.code,{children:"AnimationSystem"})," for your object, create it as following:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"protected final AnimationSystem animations = AnimationSystem.create(this);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To update your newly created system, you must update it every game tick.\nIn our example we are using ",(0,t.jsx)(n.code,{children:"TileSyncableTickable"})," as base, so we're going to add ticking code into ",(0,t.jsx)(n.code,{children:"update"})," method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Override\npublic void update()\n{\n    super.update();\n    animations.tick();\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-configuring",children:"\u2699\ufe0f Configuring"}),"\n",(0,t.jsxs)(n.p,{children:["To configure the animation system, our object must override ",(0,t.jsx)(n.code,{children:"setupSystem"})," method."]}),"\n",(0,t.jsx)(n.h3,{id:"-animationsystembuilder",children:"\ud83e\uddf1 AnimationSystem.Builder"}),"\n",(0,t.jsx)(n.p,{children:"Defaults:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"canSync: true"}),"\n",(0,t.jsx)(n.li,{children:"autoSync: false"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"AnimationSystem.Builder has the following methods:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"disableSync()"})," - completely disable all synchronization of this AnimationSystem;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"autoSync(boolean autoSync)"})," - toggle if animation system should sync to clients when animation on any given layer changes. Does not matter when ",(0,t.jsx)(n.code,{children:"disableSync()"})," is called;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"addLayers(AnimationLayer.Builder... layers)"})," - register multiple animation layers into the system;"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"-animationlayerbuilder",children:"\ud83e\uddf1 AnimationLayer.Builder"}),"\n",(0,t.jsxs)(n.p,{children:["AnimationLayer.Builder is created with ",(0,t.jsx)(n.code,{children:"AnimationLayer.builder(String name)"})," method"]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["It is recommended to use layer names provided by ",(0,t.jsx)(n.code,{children:"CommonLayerNames"})," when possible!"]})}),"\n",(0,t.jsx)(n.p,{children:"Defaults:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"query: new Query()"}),"\n",(0,t.jsx)(n.li,{children:"mask: none (permit all bone transforms)"}),"\n",(0,t.jsx)(n.li,{children:"weight: 1"}),"\n",(0,t.jsx)(n.li,{children:"blendMode: ADD"}),"\n",(0,t.jsx)(n.li,{children:"allowAutoSync: true"}),"\n",(0,t.jsx)(n.li,{children:"persistent: true"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"AnimationLayer.Builder provides following methods:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"query(Query query)"})," - used for providing additional information to animations using formulas;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"mask(ILayerMask mask)"})," - restricts animations playing on this layer based on a bone name predicate;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"weight(float weight)"})," - adjusts the weight of all animations played on this layer;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"blendMode(BlendMode blendMode)"})," - changes how animation from this layer blends with all layers prior to current one; The options for blending are:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"BlendMode.OVERRIDE"})," - Replace bone transforms from previous layer (this also counts weights from both layer and animation, lerping the transforms) with this layer. Affects only those bones which are currently being animated."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"BlendMode.ADD"})," (default) - Adds the bone transforms on top of all previous layers. This is generally the recommended behavior to use."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"BlendMode.SUBTRACT"})," - Subtracts the bone transforms. This is kind of like setting negative weight to the layer. More of a proof of concept, but may be useful to some."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"allowAutoSync(boolean allowAutoSync)"})," and ",(0,t.jsx)(n.code,{children:"preventAutoSync()"})," - determines if this layer should cause animation system to sync when a different animation is started on this layer. Only matters if the AnimationSystem owning this layer has synchronization AND auto-sync enabled"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"persistent(boolean persistent)"})," and ",(0,t.jsx)(n.code,{children:"nonPersistent()"})," - determines if the animation layer should be stored to disk. This also prevents it from being synchronized when the animation system performs sync."]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"-writing-setupsystem",children:["\u2615 Writing ",(0,t.jsx)(n.code,{children:"setupSystem"})]}),"\n",(0,t.jsx)(n.p,{children:"Here is an example of animation system which has unsynced ambient layer, as well as synced action layer:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Override\npublic void setupSystem(AnimationSystem.Builder builder)\n{\n    builder.addLayers(\n        AnimationLayer.builder(CommonLayerNames.AMBIENT).preventAutoSync(),\n        AnimationLayer.builder(CommonLayerNames.ACTION)\n    ).autoSync();\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-complete-example",children:"\u2705 Complete example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package com.storyteam.storytelling.content.tiles;\n\nimport net.minecraft.core.BlockPos;\nimport net.minecraft.nbt.CompoundTag;\nimport net.minecraft.world.level.block.entity.BlockEntityType;\nimport net.minecraft.world.level.block.state.BlockState;\nimport org.zeith.hammeranims.api.animsys.*;\nimport org.zeith.hammeranims.api.animsys.layer.AnimationLayer;\nimport org.zeith.hammeranims.api.tile.IAnimatedTile;\nimport org.zeith.hammerlib.tiles.*;\n\npublic class MyTile\n        extends TileSyncableTickable\n        implements IAnimatedTile\n{\n    protected final AnimationSystem animations = AnimationSystem.create(this);\n    \n    public MyTile(BlockEntityType<?> type, BlockPos pos, BlockState state)\n    {\n        super(type, pos, state);\n    }\n    \n    @Override\n    public void update()\n    {\n        super.update();\n        animations.tick();\n    }\n    \n    @Override\n    public void setupSystem(AnimationSystem.Builder builder)\n    {\n        builder.addLayers(\n                AnimationLayer.builder(CommonLayerNames.AMBIENT).preventAutoSync(),\n                AnimationLayer.builder(CommonLayerNames.ACTION)\n        ).autoSync();\n    }\n    \n    @Override\n    public AnimationSystem getAnimationSystem()\n    {\n        return animations;\n    }\n    \n    @Override\n    public void saveAdditional(CompoundTag nbt)\n    {\n        super.saveAdditional(nbt);\n        nbt.put("Animations", animations.serializeNBT());\n    }\n    \n    @Override\n    public void load(CompoundTag nbt)\n    {\n        super.load(nbt);\n        animations.deserializeNBT(nbt.getCompound("Animations"));\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"TileSyncableTickable"})," and ",(0,t.jsx)(n.code,{children:"TileSyncable"})," both use ",(0,t.jsx)(n.a,{href:"/docs/api/hammerlib/advanced/nbt_serialization",children:"NBTSerializationHelper"})," for reading&writing data."]}),(0,t.jsxs)(n.p,{children:["Instead of writing ",(0,t.jsx)(n.code,{children:"saveAdditional(CompoundTag nbt)"})," and ",(0,t.jsx)(n.code,{children:"load(CompoundTag nbt)"})," methods, you can put an annotation onto the animation system field:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@NBTSerializable("Animations")\nprotected final AnimationSystem animations = AnimationSystem.create(this);\n'})})]}),"\n",(0,t.jsx)(n.p,{children:"Now our tile is set up with animation system and is ready to run all of your wonderful animations!"}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-playing-animations",children:"\u23ef\ufe0f Playing animations"}),"\n",(0,t.jsxs)(n.p,{children:["Now that we have our animation system, as well as ",(0,t.jsx)(n.a,{href:"/docs/api/hammeranims/animations/registration#-getting-animations-from-container",children:"animations"}),", they can be started in a multitude of ways."]}),"\n",(0,t.jsxs)(n.p,{children:["We're going to be starting them via ",(0,t.jsx)(n.code,{children:"startAnimationAt(String layer, ConfiguredAnimation|IAnimationSource animation)"})," method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"animations.startAnimationAt(CommonLayerNames.AMBIENT, ModAnimations.YOUR_ANIMATION_IDLE);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This is going to start the idle animation on the ",(0,t.jsx)(n.code,{children:"AnimationSystem"})," (you can put it into tick function)."]}),"\n",(0,t.jsxs)(n.p,{children:["The animation itself will not restart unless it is a different animation from currently running animation, or the ConfiguredAnimation has ",(0,t.jsx)(n.code,{children:"important"})," flag set to true."]}),"\n",(0,t.jsx)(n.p,{children:"If we'd like to restart or configure the animation, you're going to need to configure the animation source:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"animations.startAnimationAt(CommonLayerNames.AMBIENT, ModAnimations.YOUR_ANIMATION_IDLE.configure());\n"})}),"\n",(0,t.jsxs)(n.p,{children:["There are a few calls that could be chained after ",(0,t.jsx)(n.code,{children:".configure()"}),", you can ",(0,t.jsx)(n.a,{href:"/docs/api/hammeranims/animations/configured_animation#%EF%B8%8F-settings",children:"see them here"}),"."]})]})}function c(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>r,a:()=>o});var t=i(7294);const a={},s=t.createContext(a);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);