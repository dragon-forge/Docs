"use strict";(self.webpackChunkhammeranims=self.webpackChunkhammeranims||[]).push([[4874],{8295:(n,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var e=t(5893),a=t(1151);const o={sidebar_position:3},r="\ud83c\udfc3\u200d\u2642\ufe0f AnimationAction",s={id:"api/hammeranims/animations/animation_actions",title:"\ud83c\udfc3\u200d\u2642\ufe0f AnimationAction",description:"If you want to perform an action after the animation is done player, you would want to look into using AnimationAction.",source:"@site/docs/api/hammeranims/animations/animation_actions.md",sourceDirName:"api/hammeranims/animations",slug:"/api/hammeranims/animations/animation_actions",permalink:"/docs/api/hammeranims/animations/animation_actions",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"apiSidebar",previous:{title:"\ud83d\udd27 ConfiguredAnimation",permalink:"/docs/api/hammeranims/animations/configured_animation"},next:{title:"\ud83d\udce6 Geometries",permalink:"/docs/category/-geometries"}},c={},d=[{value:"\u2615 Registration (Java)",id:"-registration-java",level:2},{value:"\u2328\ufe0f ModAnimations Class",id:"\ufe0f-modanimations-class",level:3},{value:"\ud83d\udce6 Adding action types",id:"-adding-action-types",level:3},{value:"\ud83c\udd95 Creating action type",id:"-creating-action-type",level:2},{value:"AnimationActionInstance",id:"animationactioninstance",level:3},{value:"AnimationAction",id:"animationaction",level:3},{value:"\ud83c\udfac Using AnimationAction",id:"-using-animationaction",level:2}];function l(n){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...n.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(i.h1,{id:"\ufe0f-animationaction",children:"\ud83c\udfc3\u200d\u2642\ufe0f AnimationAction"}),"\n",(0,e.jsxs)(i.p,{children:["If you want to perform an action after the animation is done player, you would want to look into using ",(0,e.jsx)(i.code,{children:"AnimationAction"}),"."]}),"\n",(0,e.jsx)(i.p,{children:"It is separated into action types and instances. Type is responsible for creating and executing action instance, while the instance itself is tasked with holding and serializing context information applicable to your action."}),"\n",(0,e.jsxs)(i.p,{children:["If you don't need to store much information, you can just use an empty default ",(0,e.jsx)(i.code,{children:"AnimationActionInstance"}),". It still offers storage of data through NBT, using ",(0,e.jsx)(i.code,{children:"AnimationActionInstance.getExtra()"})," method (you can create instance with extra data and execute it that way)."]}),"\n",(0,e.jsxs)(i.p,{children:["If you want to create custom action instance for storing data, you will need to override ",(0,e.jsx)(i.code,{children:"AnimationAction.createInstance"})," method to return a new unconfigured instance of your action."]}),"\n",(0,e.jsx)(i.h2,{id:"-registration-java",children:"\u2615 Registration (Java)"}),"\n",(0,e.jsx)(i.h3,{id:"\ufe0f-modanimations-class",children:"\u2328\ufe0f ModAnimations Class"}),"\n",(0,e.jsxs)(i.p,{children:["To bind actions, create an interface ",(0,e.jsx)(i.code,{children:"ModAnimationActions"})," inside your init package."]}),"\n",(0,e.jsx)(i.p,{children:"The result should look something like this:"}),"\n",(0,e.jsx)(i.pre,{children:(0,e.jsx)(i.code,{className:"language-java",children:"package com.yourname.yourmod.init;\r\n\r\nimport org.zeith.hammerlib.annotations.*;\r\n\r\n@SimplyRegister\r\npublic interface ModAnimationActions\r\n{\r\n}\n"})}),"\n",(0,e.jsx)(i.h3,{id:"-adding-action-types",children:"\ud83d\udce6 Adding action types"}),"\n",(0,e.jsxs)(i.p,{children:["To add a new animation container into the mod, simply create a new field inside ",(0,e.jsx)(i.code,{children:"ModAnimationActions"})," of type ",(0,e.jsx)(i.code,{children:"AnimationAction"}),", assign it a new AnimationAction type instance, and annotating the field with ",(0,e.jsx)(i.code,{children:'@RegistryName("name")'}),'. The "name" must be unique.']}),"\n",(0,e.jsx)(i.pre,{children:(0,e.jsx)(i.code,{className:"language-java",children:'package com.yourname.yourmod.init;\r\n\r\nimport org.zeith.hammeranims.api.animation.*;\r\nimport org.zeith.hammerlib.annotations.*;\r\n\r\n@SimplyRegister\r\npublic interface ModAnimationActions\r\n{\r\n    @RegistryName("my_action")\r\n    AnimationAction MY_ACTION = new MyAnimationAction();\r\n}\n'})}),"\n",(0,e.jsx)(i.h2,{id:"-creating-action-type",children:"\ud83c\udd95 Creating action type"}),"\n",(0,e.jsxs)(i.p,{children:["To start off, let's create a new action type: ",(0,e.jsx)(i.code,{children:"MyAnimationAction"}),", it will damage information to indicate how much damage to deal to nearby entities, and radius of action."]}),"\n",(0,e.jsx)(i.h3,{id:"animationactioninstance",children:"AnimationActionInstance"}),"\n",(0,e.jsxs)(i.p,{children:["Our class will be named ",(0,e.jsx)(i.code,{children:"MyActionInstance"}),". It requires a default constructor with the action type, here's the example of our action:"]}),"\n",(0,e.jsx)(i.pre,{children:(0,e.jsx)(i.code,{className:"language-java",children:'public class MyActionInstance\r\n\t\textends AnimationActionInstance\r\n{\r\n\tpublic float damage;\r\n\tpublic float range;\r\n\t\r\n\tpublic MyActionInstance(AnimationAction action)\r\n\t{\r\n\t\tsuper(action);\r\n\t}\r\n\t\r\n\tpublic MyActionInstance configure(float damage, float range)\r\n\t{\r\n\t\tthis.damage = damage;\r\n\t\tthis.range = range;\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic CompoundTag serializeNBT()\r\n\t{\r\n\t\tvar tag = super.serializeNBT();\r\n\t\ttag.putFloat("Damage", damage);\r\n\t\ttag.putFloat("Range", range);\r\n\t\treturn tag;\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void deserializeNBT(CompoundTag nbt)\r\n\t{\r\n\t\tthis.damage = nbt.getFloat("Damage");\r\n\t\tthis.range = nbt.getFloat("Range");\r\n\t\tsuper.deserializeNBT(nbt);\r\n\t}\r\n}\n'})}),"\n",(0,e.jsx)(i.h3,{id:"animationaction",children:"AnimationAction"}),"\n",(0,e.jsxs)(i.p,{children:["In our action type class, let's implement the first required method (",(0,e.jsx)(i.code,{children:"execute"}),"):"]}),"\n",(0,e.jsx)(i.pre,{children:(0,e.jsx)(i.code,{className:"language-java",children:"@Override\r\npublic void execute(AnimationActionInstance instance, AnimationLayer layer)\r\n{\r\n    var owner = layer.system.owner;\r\n    if(instance instanceof MyActionInstance inst)\r\n    {\r\n        var world = owner.getAnimatedObjectWorld();\r\n        \r\n        DamageSource source;\r\n        if(owner instanceof LivingEntity living)\r\n            source = world.damageSources().mobAttack(living);\r\n        else\r\n            source = world.damageSources().magic();\r\n        \r\n        var pos = owner.getAnimatedObjectPosition();\r\n        var hitBox = new AABB(pos, pos).inflate(inst.range);\r\n        for(var ent : world.getEntitiesOfClass(LivingEntity.class, hitBox))\r\n        {\r\n            // Don't damage ourselves!\r\n            if(owner == ent) continue;\r\n            \r\n            ent.hurt(source, inst.damage);\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,e.jsx)(i.p,{children:"And finally, in order for the execution to happen, we definitely need to change the associated action instances:"}),"\n",(0,e.jsx)(i.pre,{children:(0,e.jsx)(i.code,{className:"language-java",children:"@Override\r\nprotected @NotNull MyActionInstance createInstance()\r\n{\r\n\treturn new MyActionInstance(this);\r\n}\n"})}),"\n",(0,e.jsx)(i.p,{children:"While we're at it, consider creating a helper method to create configured and bound action instances:"}),"\n",(0,e.jsx)(i.pre,{children:(0,e.jsx)(i.code,{className:"language-java",children:"public static AnimationActionInstance create(float damage, float range)\r\n{\r\n\treturn new MyActionInstance(ModAnimationActions.MY_ACTION).configure(damage, range);\r\n}\n"})}),"\n",(0,e.jsx)(i.h2,{id:"-using-animationaction",children:"\ud83c\udfac Using AnimationAction"}),"\n",(0,e.jsxs)(i.p,{children:["To add your action into an animation's finish action list, simply call ",(0,e.jsx)(i.code,{children:"ConfiguredAnimation.onFinish"}),", passing a configured action instance:"]}),"\n",(0,e.jsx)(i.pre,{children:(0,e.jsx)(i.code,{className:"language-java",children:"ModAnimations.MY_ANIMATION.configure().onFinish(MyAnimationAction.create(4, 12));\n"})})]})}function m(n={}){const{wrapper:i}={...(0,a.a)(),...n.components};return i?(0,e.jsx)(i,{...n,children:(0,e.jsx)(l,{...n})}):l(n)}},1151:(n,i,t)=>{t.d(i,{Z:()=>s,a:()=>r});var e=t(7294);const a={},o=e.createContext(a);function r(n){const i=e.useContext(o);return e.useMemo((function(){return"function"==typeof n?n(i):{...i,...n}}),[i,n])}function s(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),e.createElement(o.Provider,{value:i},n.children)}}}]);