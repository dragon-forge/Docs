"use strict";(self.webpackChunkhammeranims=self.webpackChunkhammeranims||[]).push([[6983],{2364:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>a});var i=n(5893),o=n(1151);const s={sidebar_position:4},r="\ud83d\udcfa Modular GUIs",c={id:"api/hammerlib/basics/gui",title:"\ud83d\udcfa Modular GUIs",description:"[1.20.1+] Adding inheritance to GUIs.",source:"@site/docs/api/hammerlib/basics/gui.md",sourceDirName:"api/hammerlib/basics",slug:"/api/hammerlib/basics/gui",permalink:"/docs/api/hammerlib/basics/gui",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"apiSidebar",previous:{title:"\ud83c\udff7\ufe0f Tags Registration",permalink:"/docs/api/hammerlib/basics/tags"},next:{title:"\ud83e\udde0 Advanced",permalink:"/docs/category/-advanced"}},l={},a=[{value:"\ud83d\udcdd Creating GuiObjects",id:"-creating-guiobjects",level:2},{value:"\ud83c\udf33 Root",id:"-root",level:3},{value:"\ud83d\udce6 Object",id:"-object",level:3},{value:"\u26d3\ufe0f\u200d\ud83d\udca5 Inheritance",id:"\ufe0f-inheritance",level:3},{value:"\ud83c\udf75 Example!",id:"-example",level:2}];function d(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"-modular-guis",children:"\ud83d\udcfa Modular GUIs"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"[1.20.1+]"})," Adding inheritance to GUIs."]}),"\n",(0,i.jsx)(t.p,{children:"By using GuiObject as an object and a container for child GuiObjects you can create advanced GUIs which can be easily edited as well.\r\nHammerLib offers a Unity-like approach to constructing your GUI (GameObject alternative - GuiObject)."}),"\n",(0,i.jsx)(t.h2,{id:"-creating-guiobjects",children:"\ud83d\udcdd Creating GuiObjects"}),"\n",(0,i.jsx)(t.h3,{id:"-root",children:"\ud83c\udf33 Root"}),"\n",(0,i.jsx)(t.p,{children:"To begin your journey on using this system, you must first create a root (scene)."}),"\n",(0,i.jsxs)(t.p,{children:["To do this, simply call ",(0,i.jsx)(t.code,{children:"GuiObject.root()"})," which will return a new ",(0,i.jsx)(t.code,{children:"GuiRootObject"})," object for you."]}),"\n",(0,i.jsx)(t.p,{children:"This root has a few special methods, which you might use when chain-building a scene, like:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"GuiRootObject add(GuiObject child)"})," - similar to a more generic ",(0,i.jsx)(t.code,{children:"GuiObject addChild(GuiObject child)"}),", but it returns ",(0,i.jsx)(t.code,{children:"GuiRootObject"})," to enable chain-building;"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"GuiRootObject onTick(Runnable task)"})," - allows hooking into the tick before any other child object gets ticked;"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"GuiRootObject onPreRender(FloatConsumer task)"})," - calls the task with partialTicks prior to rendering any child objects;"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsxs)(t.strong,{children:["After you're done building your hierarchy, add the ",(0,i.jsx)(t.code,{children:"GuiRootObject"})," to your GUI."]}),"\r\nFor this you will need three things:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"protected GuiRootObject scene;"})," field in your GUI class;"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"this.scene = addRenderableWidget(<GuiRootObject goes here>);"})," inside ",(0,i.jsx)(t.code,{children:"init()"})," method of your GUI;"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"this.scene.sendUpdate();"})," inside the ",(0,i.jsx)(t.code,{children:"tick()"})," or ",(0,i.jsx)(t.code,{children:"containerTick()"})," (for AbstractContainerScreen instances)"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"-object",children:"\ud83d\udce6 Object"}),"\n",(0,i.jsxs)(t.p,{children:["After you have made your root, you can start adding children to it. If you're looking to use stock objects provided by HammerLib, create a new object builder by using ",(0,i.jsx)(t.code,{children:'GuiObject.create("NAME")'}),". Right now there are a few existing objects that you can use. Call one of these functions on the bulder:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"GuiObject empty()"})," - Returns an empty object (usually for inheritance purposes);"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"GuiSlotLinkObject slot(Slot slot)"})," - Links the slot to the newly created ",(0,i.jsx)(t.code,{children:"GuiSlotLinkObject"}),". You can offset/rotate/scale it however you'd like, the slow will be displayed where this link object will be;"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"GuiImageObject image(ResourceLocation tex, float uOffset, float vOffset, int width, int height, int txWidth, int txHeight)"})," - Blits an image where the object is located. You can specify the file's texture dimensions;"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"GuiImageObject image(ResourceLocation tex, float uOffset, float vOffset, int width, int height)"})," - Blits an image where the object is located. This method uses default 256x256 texture dimensions;"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"GuiTextObject text(Component text, int color, boolean shadow)"})," - Creates a label with desired text component, color and shadow;"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"GuiTextObject text(Component text)"})," - Creates a label with desired text component, white color and shadow;"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"GuiButtonObject.GuiButtonObjectBuilder button()"})," - Creates a button builder, which you must complete to obtain your ",(0,i.jsx)(t.code,{children:"GuiButtonObject"}),":","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:".message(Component message)"})," - Sets a label to the button component; (optional)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:".callback(OnPress callback)"})," - Sets a click callback to this button component;"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:".alpha(float alpha)"})," - Sets transparency for the button textures and label;"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:".enabled(boolean enabled)"})," - Toggles the button enabled state;"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:".packedFGColor(int packedFGColor)"})," - Changes the color for the button's label;"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:".pressSound(Holder<SoundEvent> pressSound)"})," - Changes the sound played when clicking on the button;  (null for no sound)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"\ufe0f-inheritance",children:"\u26d3\ufe0f\u200d\ud83d\udca5 Inheritance"}),"\n",(0,i.jsx)(t.p,{children:"Now that you have both the root and child objects, let's put things together."}),"\n",(0,i.jsxs)(t.p,{children:["Add your objects to another object using ",(0,i.jsx)(t.code,{children:"GuiObject.addChild(GuiObject child)"}),".\r\nThis will attempt to add given child into the context object."]}),"\n",(0,i.jsx)(t.admonition,{type:"warning",children:(0,i.jsx)(t.p,{children:"Please avoid using same names when adding multiple objects to same object, othewise the most recently added object may get a name change."})}),"\n",(0,i.jsx)(t.h2,{id:"-example",children:"\ud83c\udf75 Example!"}),"\n",(0,i.jsx)(t.p,{children:"Let's create a test GUI and use some of the functions. I will be using chain building, but feel free to declare fields/variables for any child component.\r\nThis is just a demo."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'public static GuiRootObject assemble(int width, int height)\r\n{\r\n    GuiObject slot, c1, c2, c3, c4;\r\n    \r\n    var g = GuiObject.root()\r\n            .add(GuiObject.create("core")\r\n                    .image(HLConstants.id("textures/gui/test_machine.png"), 0, 0, 176, 166)\r\n                    .centered(width, height)\r\n                    .addChild(GuiObject.create("btn").button()\r\n                            .message(Component.literal("Test Button"))\r\n                            .callback(b -> log.info("Clicked test button."))\r\n                            .build()\r\n                            .setEnabled(false)\r\n                            .size(100, 20)\r\n                            .pos(8, 18)\r\n                            .rotation(-90).offset(0, 50) // offset +50 on Y.\r\n                            .scale(0.5F)\r\n                            .addChild(GuiObject.create("label")\r\n                                    .text(Component.literal("Original Value"))\r\n                                    .offset(0, 20) // add to current position\r\n                            )\r\n                    )\r\n                    .addChild(slot = GuiObject.create("input")\r\n                            .image(HLConstants.id("textures/block/test_machine_front.png"), 0, 0, 16, 16, 16, 16)\r\n                            .pos(56, 17)\r\n                            .pivotAtCenter()\r\n                            .rotation(45)\r\n                            .addChild(c1 = GuiObject.create("1")\r\n                                    .image(HLConstants.id("textures/block/test_machine_front.png"), 0, 0, 8, 8, 8, 8)\r\n                                    .pivotAtCenter()\r\n                            )\r\n                            .addChild(c2 = GuiObject.create("2")\r\n                                    .image(HLConstants.id("textures/block/test_machine_front.png"), 0, 0, 8, 8, 8, 8)\r\n                                    .pivotAtCenter()\r\n                            )\r\n                            .addChild(c3 = GuiObject.create("3")\r\n                                    .image(HLConstants.id("textures/block/test_machine_front.png"), 0, 0, 8, 8, 8, 8)\r\n                                    .pivotAtCenter()\r\n                            )\r\n                            .addChild(c4 = GuiObject.create("4")\r\n                                    .image(HLConstants.id("textures/block/test_machine_front.png"), 0, 0, 8, 8, 8, 8)\r\n                                    .pivotAtCenter()\r\n                            )\r\n                    )\r\n            )\r\n            .onPreRender(partialTicks ->\r\n            {\r\n                long sys = System.currentTimeMillis();\r\n                float dist = Mth.sin(sys % 36000L / 100F);\r\n                float r = sys % 3600L / 10F;\r\n                slot.rotation(r); c1.rotation(r + 45); c2.rotation(r + 45); c3.rotation(r + 45); c4.rotation(r + 45);\r\n                c1.pos(16 + 8 * dist, 16 + 8 * dist); c2.pos(-8 - 8 * dist, 16 + 8 * dist); c3.pos(16 + 8 * dist, -8 - 8 * dist); c4.pos(-8 - 8 * dist, -8 - 8 * dist);\r\n            });\r\n    \r\n    GuiButtonObject cbtn = g.findByPath("core/btn", GuiButtonObject.class);\r\n    if(cbtn != null) cbtn.message = Component.literal("Changed Text");\r\n    \r\n    GuiTextObject lbl = g.findByPath("core/btn/label", GuiTextObject.class);\r\n    if(lbl != null) lbl.setText(Component.literal("I\'m under button!"));\r\n    \r\n    // Enable this to see AABBs of all components\r\n    g.debugBoundaries = true;\r\n    g.debugBoundaryColor = 0xFF669999;\r\n    \r\n    return g;\r\n}\n'})})]})}function h(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>r});var i=n(7294);const o={},s=i.createContext(o);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);